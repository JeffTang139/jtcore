/* The following code was generated by JFlex 1.4.3 on 10-7-7 ÏÂÎç12:02 */

package org.eclipse.jt.core.impl;

import java.io.IOException;

import org.eclipse.jt.core.spi.sql.SQLNumberFormatException;
import org.eclipse.jt.core.spi.sql.SQLTokenUndefinedException;


/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.4.3 on 10-7-7 ÏÂÎç12:02 from the specification file
 * <tt>D:/Workspace/D&A/dnasql/meta/dnasql.flex</tt>
 */
public final class SQLLexer {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int QUOTED_ID = 4;
	public static final int YYINITIAL = 0;
	public static final int COMMENT = 6;
	public static final int STR = 2;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
	 * beginning of a line l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1, 2, 2, 3, 3 };

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\0\1\60\1\11\2\0\1\11\22\0\1\60\1\0\1\13\1\10"
			+ "\1\0\1\24\1\0\1\12\1\25\1\26\1\22\1\21\1\17\1\4"
			+ "\1\2\1\23\12\1\1\0\1\27\1\15\1\16\1\14\1\0\1\7"
			+ "\1\42\1\47\1\52\1\30\1\3\1\31\1\44\1\55\1\32\1\56"
			+ "\1\57\1\50\1\41\1\33\1\40\1\43\1\34\1\36\1\51\1\46"
			+ "\1\35\1\45\1\54\1\53\1\37\1\5\4\0\1\6\1\0\1\42"
			+ "\1\47\1\52\1\30\1\3\1\31\1\44\1\55\1\32\1\56\1\57"
			+ "\1\50\1\41\1\33\1\40\1\43\1\34\1\36\1\51\1\46\1\35"
			+ "\1\45\1\54\1\53\1\37\1\5\1\0\1\20\uff83\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\5"
			+ "\2\2\1\1\1\7\1\10\1\11\1\12\1\13\1\14"
			+ "\1\2\1\15\1\16\1\17\1\20\1\21\1\22\1\23"
			+ "\26\5\1\24\1\25\1\24\1\26\1\1\1\27\2\0"
			+ "\4\5\1\30\1\31\1\32\1\33\1\34\1\35\1\36"
			+ "\12\5\1\37\1\40\1\41\15\5\1\42\1\43\1\5"
			+ "\1\44\7\5\1\45\7\5\1\46\5\5\1\47\24\5"
			+ "\1\50\1\51\2\52\1\0\1\53\17\5\1\54\4\5"
			+ "\1\55\3\5\1\56\10\5\1\57\4\5\1\60\1\5"
			+ "\1\61\1\5\1\62\1\5\1\63\1\64\1\5\1\65"
			+ "\1\66\1\5\1\67\1\70\5\5\1\71\21\5\1\72"
			+ "\1\5\1\73\23\5\1\74\1\5\1\75\1\76\6\5"
			+ "\1\77\2\5\1\100\2\5\1\101\1\102\5\5\1\103"
			+ "\2\5\1\104\32\5\1\105\5\5\1\106\1\107\1\5"
			+ "\1\110\4\5\1\111\1\5\1\112\1\113\1\114\1\115"
			+ "\1\116\11\5\1\117\1\5\1\120\1\121\1\122\3\5"
			+ "\1\123\2\5\1\124\15\5\1\125\1\126\1\5\1\127"
			+ "\3\5\1\130\1\131\1\132\1\5\1\133\1\5\1\134"
			+ "\3\5\1\135\1\5\1\136\1\137\6\5\1\140\4\5"
			+ "\1\141\2\5\1\142\1\5\1\143\1\144\2\5\1\145"
			+ "\1\146\4\5\1\147\2\5\1\150\3\5\1\151\1\152"
			+ "\1\153\3\5\1\154\1\155\1\156\1\157\1\5\1\160"
			+ "\2\5\1\161\1\162\3\5\1\163\2\5\1\164\1\165"
			+ "\1\166\1\167\2\5\1\170\14\5\1\171\1\5\1\172"
			+ "\1\5\1\173\1\174\7\5\1\175\1\5\1\176\3\5"
			+ "\1\177\1\200\1\201\6\5\1\202\4\5\1\203\4\5"
			+ "\1\204\1\205\1\206\1\5\1\207\1\5\1\210\1\5"
			+ "\1\211\3\5\1\212\1\213\1\214\1\5\1\215\1\216"
			+ "\1\5\1\217\1\220\1\221\1\5\1\222\1\5\1\223"
			+ "\3\5\1\224\1\225\1\5\1\226\1\5\1\227\1\230"
			+ "\1\231\1\5\1\232\1\233\1\234\3\5\1\235\3\5"
			+ "\1\236\1\237\1\240";

	private static int[] zzUnpackAction() {
		int[] result = new int[535];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\61\0\142\0\223\0\304\0\365\0\304\0\u0126"
			+ "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\304\0\304\0\u024c"
			+ "\0\u027d\0\304\0\304\0\u02ae\0\304\0\304\0\304\0\304"
			+ "\0\304\0\304\0\304\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3"
			+ "\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b"
			+ "\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3"
			+ "\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\304\0\u080a"
			+ "\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\304\0\u0930\0\u0961"
			+ "\0\304\0\304\0\304\0\304\0\u0992\0\u09c3\0\u09f4\0\u0a25"
			+ "\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0188\0\u0b7c"
			+ "\0\u0188\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3"
			+ "\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0188\0\u0188"
			+ "\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81"
			+ "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"
			+ "\0\u113a\0\u0188\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260"
			+ "\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8"
			+ "\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570"
			+ "\0\u15a1\0\u15d2\0\u1603\0\u1634\0\304\0\304\0\u1665\0\u1696"
			+ "\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"
			+ "\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975"
			+ "\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd"
			+ "\0\u1b2e\0\u1b5f\0\u0188\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54"
			+ "\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc"
			+ "\0\u0188\0\u1e0d\0\u0188\0\u1e3e\0\u0188\0\u1e6f\0\u1ea0\0\u0188"
			+ "\0\u1ed1\0\u0188\0\u0188\0\u1f02\0\u0188\0\u0188\0\u1f33\0\u1f64"
			+ "\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec"
			+ "\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274"
			+ "\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369\0\u0188\0\u239a\0\u0188"
			+ "\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522"
			+ "\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa"
			+ "\0\u26db\0\u270c\0\u273d\0\u0188\0\u276e\0\u0188\0\u0188\0\u279f"
			+ "\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927"
			+ "\0\u0188\0\u2958\0\u2989\0\u0188\0\u0188\0\u29ba\0\u29eb\0\u2a1c"
			+ "\0\u2a4d\0\u2a7e\0\u0188\0\u2aaf\0\u2ae0\0\u0188\0\u2b11\0\u2b42"
			+ "\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\u2cca"
			+ "\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52"
			+ "\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda"
			+ "\0\u0188\0\u300b\0\u303c\0\u306d\0\u309e\0\u30cf\0\u0188\0\u0188"
			+ "\0\u3100\0\u0188\0\u3131\0\u3162\0\u3193\0\u31c4\0\u31f5\0\u3226"
			+ "\0\u0188\0\u0188\0\u0188\0\u0188\0\u0188\0\u3257\0\u3288\0\u32b9"
			+ "\0\u32ea\0\u331b\0\u334c\0\u337d\0\u33ae\0\u33df\0\u0188\0\u3410"
			+ "\0\u0188\0\u0188\0\u0188\0\u3441\0\u3472\0\u34a3\0\u0188\0\u34d4"
			+ "\0\u3505\0\u0188\0\u3536\0\u3567\0\u3598\0\u35c9\0\u35fa\0\u362b"
			+ "\0\u365c\0\u368d\0\u36be\0\u36ef\0\u3720\0\u3751\0\u3782\0\u0188"
			+ "\0\u0188\0\u37b3\0\u0188\0\u37e4\0\u3815\0\u3846\0\u0188\0\u0188"
			+ "\0\u0188\0\u3877\0\u0188\0\u38a8\0\u0188\0\u38d9\0\u390a\0\u393b"
			+ "\0\u0188\0\u396c\0\u0188\0\u0188\0\u399d\0\u39ce\0\u39ff\0\u3a30"
			+ "\0\u3a61\0\u3a92\0\u0188\0\u3ac3\0\u3af4\0\u3b25\0\u3b56\0\u0188"
			+ "\0\u3b87\0\u3bb8\0\u0188\0\u3be9\0\u0188\0\u0188\0\u3c1a\0\u3c4b"
			+ "\0\u0188\0\u0188\0\u3c7c\0\u3cad\0\u3cde\0\u3d0f\0\u0188\0\u3d40"
			+ "\0\u3d71\0\u0188\0\u3da2\0\u3dd3\0\u3e04\0\u0188\0\u0188\0\u0188"
			+ "\0\u3e35\0\u3e66\0\u3e97\0\u0188\0\u0188\0\u0188\0\u0188\0\u3ec8"
			+ "\0\u0188\0\u3ef9\0\u3f2a\0\u0188\0\u0188\0\u3f5b\0\u3f8c\0\u3fbd"
			+ "\0\u0188\0\u3fee\0\u401f\0\u0188\0\u0188\0\u4050\0\u0188\0\u4081"
			+ "\0\u40b2\0\u0188\0\u40e3\0\u4114\0\u4145\0\u4176\0\u41a7\0\u41d8"
			+ "\0\u4209\0\u423a\0\u426b\0\u429c\0\u42cd\0\u42fe\0\u0188\0\u432f"
			+ "\0\u0188\0\u4360\0\u0188\0\u0188\0\u4391\0\u43c2\0\u43f3\0\u4424"
			+ "\0\u4455\0\u4486\0\u44b7\0\u0188\0\u44e8\0\u0188\0\u4519\0\u454a"
			+ "\0\u457b\0\u0188\0\u0188\0\u0188\0\u45ac\0\u45dd\0\u460e\0\u463f"
			+ "\0\u4670\0\u46a1\0\u0188\0\u46d2\0\u4703\0\u4734\0\u4765\0\u0188"
			+ "\0\u4796\0\u47c7\0\u47f8\0\u4829\0\u0188\0\u0188\0\u0188\0\u485a"
			+ "\0\u0188\0\u488b\0\u0188\0\u48bc\0\u0188\0\u48ed\0\u491e\0\u494f"
			+ "\0\u0188\0\u0188\0\u0188\0\u4980\0\u49b1\0\u0188\0\u49e2\0\u0188"
			+ "\0\u0188\0\u0188\0\u4a13\0\u0188\0\u4a44\0\u0188\0\u4a75\0\u4aa6"
			+ "\0\u4ad7\0\u0188\0\u0188\0\u4b08\0\u0188\0\u4b39\0\u0188\0\u0188"
			+ "\0\u0188\0\u4b6a\0\u0188\0\u0188\0\u0188\0\u4b9b\0\u4bcc\0\u4bfd"
			+ "\0\u0188\0\u4c2e\0\u4c5f\0\u4c90\0\u0188\0\u0188\0\u0188";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[535];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\5\1\6\1\7\1\10\1\11\1\12\1\5\1\13"
			+ "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"
			+ "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"
			+ "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\12"
			+ "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"
			+ "\1\53\1\54\1\55\1\12\1\56\1\57\1\60\1\61"
			+ "\1\15\11\62\1\0\1\63\46\62\13\64\1\65\45\64"
			+ "\11\66\1\67\47\66\62\0\1\6\1\70\1\71\56\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\3\12\1\72"
			+ "\14\12\1\73\1\74\1\12\1\75\4\12\5\0\1\76"
			+ "\55\0\1\12\1\0\1\12\1\0\2\12\21\0\30\12"
			+ "\4\0\1\77\1\0\1\77\22\0\30\77\4\0\1\100"
			+ "\1\0\1\100\22\0\30\100\12\0\1\15\46\0\1\15"
			+ "\16\0\1\101\56\0\1\102\1\0\1\103\62\0\1\104"
			+ "\41\0\1\12\1\0\1\105\1\0\2\12\21\0\2\12"
			+ "\1\106\5\12\1\107\1\12\1\110\15\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\2\12\1\111\2\12"
			+ "\1\112\1\113\1\12\1\114\1\12\1\115\5\12\1\116"
			+ "\7\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\1\12\1\117\1\12\1\120\15\12\1\121\6\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\5\12\1\122"
			+ "\2\12\1\123\4\12\1\124\1\125\3\12\1\126\5\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\5\12"
			+ "\1\127\22\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\3\12\1\130\7\12\1\131\5\12\1\132\6\12"
			+ "\2\0\1\12\1\0\1\133\1\0\2\12\21\0\2\12"
			+ "\1\134\5\12\1\135\1\12\1\136\15\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\1\12\1\137\1\12"
			+ "\1\140\1\12\1\141\1\142\6\12\1\143\12\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\2\12\1\144"
			+ "\7\12\1\145\15\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\3\12\1\146\11\12\1\147\1\12\1\150"
			+ "\1\151\1\152\6\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\6\12\1\153\3\12\1\154\15\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\5\12\1\155"
			+ "\1\156\21\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\12\12\1\157\15\12\2\0\1\12\1\0\1\160"
			+ "\1\0\2\12\21\0\6\12\1\161\1\12\1\162\1\12"
			+ "\1\163\12\12\1\164\2\12\2\0\1\12\1\0\1\165"
			+ "\1\0\2\12\21\0\2\12\1\166\3\12\1\167\1\170"
			+ "\1\171\7\12\1\172\7\12\2\0\1\12\1\0\1\173"
			+ "\1\0\2\12\21\0\2\12\1\174\5\12\1\175\17\12"
			+ "\2\0\1\12\1\0\1\176\1\0\2\12\21\0\5\12"
			+ "\1\177\10\12\1\200\6\12\1\201\2\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\5\12\1\202\2\12"
			+ "\1\203\1\12\1\204\12\12\1\205\2\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\2\12\1\206\22\12"
			+ "\1\207\2\12\2\0\1\12\1\0\1\12\1\0\1\12"
			+ "\1\210\21\0\2\12\1\211\7\12\1\212\15\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\10\12\1\213"
			+ "\17\12\2\0\1\12\1\0\1\214\1\0\2\12\21\0"
			+ "\30\12\1\0\11\62\2\0\46\62\12\0\1\215\46\0"
			+ "\13\64\1\0\45\64\13\0\1\216\45\0\11\66\1\0"
			+ "\47\66\1\0\1\217\60\0\1\220\2\0\1\221\55\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\1\222\4\12"
			+ "\1\223\22\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\21\12\1\224\6\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\22\12\1\225\5\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\2\12\1\226\13\12"
			+ "\1\227\11\12\2\0\1\77\1\0\1\77\1\0\2\77"
			+ "\21\0\30\77\2\0\1\100\1\0\1\100\1\0\2\100"
			+ "\21\0\30\100\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\1\12\1\230\16\12\1\231\1\232\6\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\21\12\1\233"
			+ "\6\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\5\12\1\234\22\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\16\12\1\235\11\12\2\0\1\12\1\0"
			+ "\1\236\1\0\2\12\21\0\30\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\3\12\1\237\14\12\1\240"
			+ "\7\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\10\12\1\241\17\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\6\12\1\242\21\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\20\12\1\243\7\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\10\12\1\244"
			+ "\17\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\1\245\7\12\1\246\5\12\1\247\2\12\1\250\6\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\11\12"
			+ "\1\251\6\12\1\252\7\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\16\12\1\253\11\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\12\12\1\254\15\12"
			+ "\2\0\1\12\1\0\1\255\1\0\2\12\21\0\30\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\25\12"
			+ "\1\256\2\12\2\0\1\12\1\0\1\257\1\0\2\12"
			+ "\21\0\30\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\2\12\1\260\25\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\1\261\27\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\2\12\1\262\25\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\16\12\1\263"
			+ "\1\12\1\264\1\12\1\265\5\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\14\12\1\266\13\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\20\12\1\267"
			+ "\7\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\3\12\1\270\24\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\16\12\1\271\11\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\1\272\10\12\1\273\16\12"
			+ "\2\0\1\12\1\0\1\274\1\0\2\12\21\0\30\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\3\12"
			+ "\1\275\24\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\13\12\1\276\7\12\1\277\4\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\1\300\21\12\1\301"
			+ "\5\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\14\12\1\302\13\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\10\12\1\303\10\12\1\304\6\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\20\12\1\305"
			+ "\7\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\22\12\1\306\5\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\2\12\1\307\5\12\1\310\17\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\6\12\1\311"
			+ "\21\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\2\12\1\312\25\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\10\12\1\313\17\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\6\12\1\314\6\12\1\315"
			+ "\2\12\1\316\7\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\23\12\1\317\4\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\5\12\1\320\22\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\17\12\1\321"
			+ "\10\12\2\0\1\12\1\0\1\322\1\0\2\12\21\0"
			+ "\30\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\14\12\1\323\1\12\1\324\11\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\3\12\1\325\24\12\2\0"
			+ "\1\12\1\0\1\326\1\0\2\12\21\0\30\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\16\12\1\327"
			+ "\11\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\10\12\1\330\17\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\10\12\1\331\17\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\1\12\1\332\26\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\27\12\1\333"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\3\12"
			+ "\1\334\4\12\1\335\17\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\16\12\1\336\1\12\1\337\7\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\11\12"
			+ "\1\340\16\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\6\12\1\341\3\12\1\342\15\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\10\12\1\343\17\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\6\12"
			+ "\1\344\21\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\3\12\1\345\1\12\1\346\3\12\1\347\1\350"
			+ "\15\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\21\12\1\351\6\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\2\12\1\352\7\12\1\353\15\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\16\12\1\354"
			+ "\11\12\2\0\1\12\1\0\1\355\1\0\2\12\21\0"
			+ "\2\12\1\356\25\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\12\12\1\357\5\12\1\360\7\12\2\0"
			+ "\1\12\1\0\1\361\1\0\2\12\21\0\30\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\15\12\1\362"
			+ "\12\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\2\12\1\363\25\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\7\12\1\364\20\12\2\0\1\217\1\0"
			+ "\1\71\56\0\1\220\60\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\21\12\1\365\6\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\11\12\1\366\16\12\2\0"
			+ "\1\12\1\0\1\367\1\0\2\12\21\0\30\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\12\12\1\370"
			+ "\15\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\21\12\1\371\6\12\2\0\1\12\1\0\1\372\1\0"
			+ "\2\12\21\0\30\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\2\12\1\373\7\12\1\374\15\12\2\0"
			+ "\1\12\1\0\1\375\1\0\2\12\21\0\30\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\22\12\1\376"
			+ "\5\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\16\12\1\377\11\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\17\12\1\u0100\10\12\2\0\1\12\1\0"
			+ "\1\u0101\1\0\2\12\21\0\30\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\20\12\1\u0102\7\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\22\12\1\u0103"
			+ "\5\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\20\12\1\u0104\7\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\11\12\1\u0105\16\12\2\0\1\12\1\0"
			+ "\1\u0106\1\0\2\12\21\0\30\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\21\12\1\u0107\6\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\12\12\1\u0108"
			+ "\15\12\2\0\1\12\1\0\1\u0109\1\0\2\12\21\0"
			+ "\30\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\5\12\1\u010a\22\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\10\12\1\u010b\17\12\2\0\1\12\1\0"
			+ "\1\u010c\1\0\2\12\21\0\30\12\2\0\1\12\1\0"
			+ "\1\u010d\1\0\2\12\21\0\30\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\20\12\1\u010e\7\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\6\12\1\u010f"
			+ "\21\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\23\12\1\u0110\4\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\12\12\1\u0111\15\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\6\12\1\u0112\21\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\4\12\1\u0113"
			+ "\3\12\1\u0114\17\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\12\12\1\u0115\15\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\3\12\1\u0116\24\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\5\12\1\u0117"
			+ "\22\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\12\12\1\u0118\15\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\10\12\1\u0119\17\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\25\12\1\u011a\2\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\20\12\1\u011b"
			+ "\7\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\14\12\1\u011c\13\12\2\0\1\12\1\0\1\u011d\1\0"
			+ "\2\12\21\0\30\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\6\12\1\u011e\21\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\13\12\1\u011f\14\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\20\12\1\u0120"
			+ "\1\12\1\u0121\5\12\2\0\1\12\1\0\1\u0122\1\0"
			+ "\2\12\21\0\30\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\16\12\1\u0123\11\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\3\12\1\u0124\5\12\1\u0125"
			+ "\16\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\22\12\1\u0126\5\12\2\0\1\12\1\0\1\u0127\1\0"
			+ "\2\12\21\0\16\12\1\u0128\11\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\1\u0129\27\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\5\12\1\u012a\22\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\17\12"
			+ "\1\u012b\2\12\1\u012c\5\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\20\12\1\u012d\7\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\5\12\1\u012e\22\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\16\12"
			+ "\1\u012f\11\12\2\0\1\12\1\0\1\u0130\1\0\2\12"
			+ "\21\0\30\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\20\12\1\u0131\7\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\3\12\1\u0132\24\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\2\12\1\u0133\25\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\24\12"
			+ "\1\u0134\3\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\12\12\1\u0135\15\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\12\12\1\u0136\15\12\2\0\1\12"
			+ "\1\0\1\u0137\1\0\2\12\21\0\30\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\20\12\1\u0138\7\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\17\12"
			+ "\1\u0139\10\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\16\12\1\u013a\11\12\2\0\1\12\1\0\1\u013b"
			+ "\1\0\2\12\21\0\30\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\14\12\1\u013c\13\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\13\12\1\u013d\14\12"
			+ "\2\0\1\12\1\0\1\u013e\1\0\2\12\21\0\30\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\2\12"
			+ "\1\u013f\25\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\6\12\1\u0140\21\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\6\12\1\u0141\21\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\6\12\1\u0142\21\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\16\12"
			+ "\1\u0143\11\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\3\12\1\u0144\24\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\11\12\1\u0145\16\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\20\12\1\u0146\7\12"
			+ "\2\0\1\12\1\0\1\u0147\1\0\2\12\21\0\30\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\20\12"
			+ "\1\u0148\7\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\6\12\1\u0149\21\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\25\12\1\u014a\2\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\3\12\1\u014b\2\12"
			+ "\1\u014c\21\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\20\12\1\u014d\7\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\2\12\1\u014e\25\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\15\12\1\u014f\12\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\6\12"
			+ "\1\u0150\21\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\2\12\1\u0151\25\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\3\12\1\u0152\24\12\2\0\1\12"
			+ "\1\0\1\12\1\0\1\12\1\u0153\21\0\30\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\13\12\1\u0154"
			+ "\14\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\16\12\1\u0155\11\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\3\12\1\u0156\24\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\3\12\1\u0157\24\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\5\12\1\u0158"
			+ "\22\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\16\12\1\u0159\11\12\2\0\1\12\1\0\1\u015a\1\0"
			+ "\2\12\21\0\30\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\2\12\1\u015b\25\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\20\12\1\u015c\7\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\1\u015d\27\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\16\12"
			+ "\1\u015e\11\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\12\12\1\u015f\15\12\2\0\1\12\1\0\1\u0160"
			+ "\1\0\2\12\21\0\30\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\16\12\1\u0161\11\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\23\12\1\u0162\4\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\16\12"
			+ "\1\u0163\11\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\6\12\1\u0164\21\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\6\12\1\u0165\21\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\22\12\1\u0166\5\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\16\12"
			+ "\1\u0167\11\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\6\12\1\u0168\21\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\7\12\1\u0169\20\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\5\12\1\u016a\22\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\3\12"
			+ "\1\u016b\24\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\16\12\1\u016c\11\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\14\12\1\u016d\13\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\6\12\1\u016e\21\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\16\12"
			+ "\1\u016f\11\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\6\12\1\u0170\21\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\16\12\1\u0171\11\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\5\12\1\u0172\22\12"
			+ "\2\0\1\12\1\0\1\u0173\1\0\2\12\21\0\30\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\6\12"
			+ "\1\u0174\21\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\6\12\1\u0175\21\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\2\12\1\u0176\25\12\2\0\1\12"
			+ "\1\0\1\u0177\1\0\2\12\21\0\30\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\10\12\1\u0178\17\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\21\12"
			+ "\1\u0179\6\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\6\12\1\u017a\21\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\16\12\1\u017b\11\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\12\12\1\u017c\15\12"
			+ "\2\0\1\12\1\0\1\u017d\1\0\2\12\21\0\30\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\3\12"
			+ "\1\u017e\24\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\2\12\1\u017f\25\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\13\12\1\u0180\14\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\2\12\1\u0181\25\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\25\12"
			+ "\1\u0182\2\12\2\0\1\12\1\0\1\u0183\1\0\2\12"
			+ "\21\0\30\12\2\0\1\12\1\0\1\u0184\1\0\2\12"
			+ "\21\0\30\12\2\0\1\12\1\0\1\u0185\1\0\2\12"
			+ "\21\0\30\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\3\12\1\u0186\24\12\2\0\1\12\1\0\1\u0187"
			+ "\1\0\2\12\21\0\30\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\6\12\1\u0188\21\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\27\12\1\u0189\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\21\12\1\u018a"
			+ "\6\12\2\0\1\12\1\0\1\u018b\1\0\2\12\21\0"
			+ "\30\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\22\12\1\u018c\5\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\3\12\1\u018d\24\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\16\12\1\u018e\11\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\16\12\1\u018f"
			+ "\11\12\2\0\1\12\1\0\1\u0190\1\0\2\12\21\0"
			+ "\30\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\12\12\1\u0191\15\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\16\12\1\u0192\11\12\2\0\1\12\1\0"
			+ "\1\u0193\1\0\2\12\21\0\30\12\2\0\1\12\1\0"
			+ "\1\u0194\1\0\2\12\21\0\30\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\1\u0195\27\12\2\0\1\12"
			+ "\1\0\1\u0196\1\0\2\12\21\0\30\12\2\0\1\12"
			+ "\1\0\1\u0197\1\0\2\12\21\0\30\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\1\u0198\27\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\12\12\1\u0199"
			+ "\15\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\3\12\1\u019a\24\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\24\12\1\u019b\3\12\2\0\1\12\1\0"
			+ "\1\u019c\1\0\2\12\21\0\30\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\21\12\1\u019d\6\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\1\u019e\27\12"
			+ "\2\0\1\12\1\0\1\u019f\1\0\2\12\21\0\30\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\20\12"
			+ "\1\u01a0\7\12\2\0\1\12\1\0\1\u01a1\1\0\2\12"
			+ "\21\0\30\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\3\12\1\u01a2\24\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\3\12\1\u01a3\24\12\2\0\1\12"
			+ "\1\0\1\u01a4\1\0\2\12\21\0\30\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\21\12\1\u01a5\6\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\2\12"
			+ "\1\u01a6\25\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\22\12\1\u01a7\5\12\2\0\1\12\1\0\1\u01a8"
			+ "\1\0\2\12\21\0\30\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\16\12\1\u01a9\11\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\2\12\1\u01aa\25\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\25\12"
			+ "\1\u01ab\2\12\2\0\1\12\1\0\1\u01ac\1\0\2\12"
			+ "\21\0\30\12\2\0\1\12\1\0\1\u01ad\1\0\2\12"
			+ "\21\0\30\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\3\12\1\u01ae\24\12\2\0\1\12\1\0\1\u01af"
			+ "\1\0\2\12\21\0\2\12\1\u01b0\25\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\1\u01b1\27\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\13\12\1\u01b2"
			+ "\14\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\2\12\1\u01b3\25\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\3\12\1\u01b4\24\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\15\12\1\u01b5\12\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\5\12\1\u01b6"
			+ "\22\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\16\12\1\u01b7\11\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\12\12\1\u01b8\15\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\6\12\1\u01b9\21\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\1\u01ba\27\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\16\12"
			+ "\1\u01bb\11\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\16\12\1\u01bc\11\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\3\12\1\u01bd\24\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\12\12\1\u01be\15\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\21\12"
			+ "\1\u01bf\6\12\2\0\1\12\1\0\1\u01c0\1\0\2\12"
			+ "\21\0\30\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\7\12\1\u01c1\20\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\12\12\1\u01c2\15\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\16\12\1\u01c3\11\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\14\12"
			+ "\1\u01c4\13\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\21\12\1\u01c5\6\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\3\12\1\u01c6\24\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\2\12\1\u01c7\25\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\3\12"
			+ "\1\u01c8\24\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\21\12\1\u01c9\6\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\10\12\1\u01ca\17\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\6\12\1\u01cb\21\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\14\12"
			+ "\1\u01cc\13\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\2\12\1\u01cd\25\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\16\12\1\u01ce\11\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\1\u01cf\27\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\22\12\1\u01d0"
			+ "\5\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\10\12\1\u01d1\17\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\25\12\1\u01d2\2\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\21\12\1\u01d3\6\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\22\12\1\u01d4"
			+ "\5\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\12\12\1\u01d5\15\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\2\12\1\u01d6\25\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\10\12\1\u01d7\4\12\1\u01d8"
			+ "\12\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\21\12\1\u01d9\6\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\1\u01da\27\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\14\12\1\u01db\13\12\2\0\1\12"
			+ "\1\0\1\u01dc\1\0\2\12\21\0\30\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\3\12\1\u01dd\24\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\10\12"
			+ "\1\u01de\17\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\22\12\1\u01df\5\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\7\12\1\u01e0\20\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\5\12\1\u01e1\22\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\10\12"
			+ "\1\u01e2\17\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\2\12\1\u01e3\25\12\2\0\1\12\1\0\1\12"
			+ "\1\0\2\12\21\0\12\12\1\u01e4\15\12\2\0\1\12"
			+ "\1\0\1\12\1\0\2\12\21\0\6\12\1\u01e5\21\12"
			+ "\2\0\1\12\1\0\1\12\1\0\2\12\21\0\3\12"
			+ "\1\u01e6\24\12\2\0\1\12\1\0\1\12\1\0\2\12"
			+ "\21\0\3\12\1\u01e7\24\12\2\0\1\12\1\0\1\12"
			+ "\1\0\1\12\1\u01e8\21\0\30\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\16\12\1\u01e9\11\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\3\12\1\u01ea"
			+ "\24\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\16\12\1\u01eb\11\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\22\12\1\u01ec\5\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\1\12\1\u01ed\26\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\22\12\1\u01ee"
			+ "\5\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\16\12\1\u01ef\11\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\12\12\1\u01f0\15\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\16\12\1\u01f1\11\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\3\12\1\u01f2"
			+ "\24\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\6\12\1\u01f3\21\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\3\12\1\u01f4\24\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\3\12\1\u01f5\24\12\2\0"
			+ "\1\12\1\0\1\u01f6\1\0\2\12\21\0\30\12\2\0"
			+ "\1\12\1\0\1\u01f7\1\0\2\12\21\0\30\12\2\0"
			+ "\1\12\1\0\1\u01f8\1\0\2\12\21\0\30\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\20\12\1\u01f9"
			+ "\7\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\16\12\1\u01fa\11\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\6\12\1\u01fb\21\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\16\12\1\u01fc\11\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\6\12\1\u01fd"
			+ "\21\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\1\12\1\u01fe\26\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\10\12\1\u01ff\17\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\6\12\1\u0200\21\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\24\12\1\u0201"
			+ "\3\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\21\12\1\u0202\6\12\2\0\1\12\1\0\1\u0203\1\0"
			+ "\2\12\21\0\30\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\25\12\1\u0204\2\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\25\12\1\u0205\2\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\3\12\1\u0206"
			+ "\24\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\14\12\1\u0207\13\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\21\12\1\u0208\6\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\16\12\1\u0209\11\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\10\12\1\u020a"
			+ "\17\12\2\0\1\12\1\0\1\u020b\1\0\2\12\21\0"
			+ "\30\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\3\12\1\u020c\24\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\7\12\1\u020d\20\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\2\12\1\u020e\25\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\2\12\1\u020f"
			+ "\25\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\16\12\1\u0210\11\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\1\12\1\u0211\26\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\16\12\1\u0212\11\12\2\0"
			+ "\1\12\1\0\1\u0213\1\0\2\12\21\0\30\12\2\0"
			+ "\1\12\1\0\1\12\1\0\2\12\21\0\10\12\1\u0214"
			+ "\17\12\2\0\1\12\1\0\1\12\1\0\2\12\21\0"
			+ "\25\12\1\u0215\2\12\2\0\1\12\1\0\1\12\1\0"
			+ "\2\12\21\0\21\12\1\u0216\6\12\2\0\1\12\1\0"
			+ "\1\12\1\0\2\12\21\0\1\12\1\u0217\26\12\1\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[19649];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
			"Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\3\0\1\1\1\11\1\1\1\11\6\1\2\11\2\1"
			+ "\2\11\1\1\7\11\33\1\1\11\2\0\4\1\1\11"
			+ "\2\1\4\11\110\1\2\11\2\1\1\0\u0186\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[535];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of
	 * the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from
	 * input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/* user code: */
	public Token val;

	private StringBuilder sb = new StringBuilder();

	public int read() {
		try {
			this.val = null;
			return this.yylex();
		} catch (IOException ioe) {
			throw new IllegalStateException(ioe);
		}
	}

	private int SETFUNCTION(int t, NAggregateExpr.Func func) {
		this.val = new TSetFunction(func, this.yyline, this.yycolumn, this
				.yylength());
		return t;
	}

	private int HIERARCHY(int t, NHierarchyExpr.Keywords keyword) {
		this.val = new THierarchy(keyword, this.yyline, this.yycolumn, this
				.yylength());
		return t;
	}

	private int VALUECOMPARE(int t, NCompareExpr.Operator op) {
		this.val = new TValueCompare(op, this.yyline, this.yycolumn, this
				.yylength());
		return t;
	}

	private int STRCOMPARE(int t, NStrCompareExpr.Keywords keyword) {
		this.val = new TStrCompare(keyword, this.yyline, this.yycolumn, this
				.yylength());
		return t;
	}

	private int KEYWORD(int t) {
		this.val = new Token(this.yyline, this.yycolumn, this.yylength());
		return t;
	}

	private int IDENTIFIER(String value) {
		this.val = new TString(value, this.yyline, this.yycolumn, this
				.yylength());
		return SQLParser.ID;
	}

	private int STRING(String value) {
		this.val = new TString(value, this.yyline, this.yycolumn, this
				.yylength());
		return SQLParser.STR_VAL;
	}

	private int BOOLEAN(int t, boolean value) {
		this.val = new TBoolean(value, this.yyline, this.yycolumn, this
				.yylength());
		return t;
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	public SQLLexer(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	public SQLLexer(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 * 
	 * @param packed
	 *            the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 176) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do {
				map[j++] = value;
			} while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 * 
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (this.zzStartRead > 0) {
			System.arraycopy(this.zzBuffer, this.zzStartRead, this.zzBuffer, 0,
					this.zzEndRead - this.zzStartRead);

			/* translate stored positions */
			this.zzEndRead -= this.zzStartRead;
			this.zzCurrentPos -= this.zzStartRead;
			this.zzMarkedPos -= this.zzStartRead;
			this.zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (this.zzCurrentPos >= this.zzBuffer.length) {
			/* if not: blow it up */
			char newBuffer[] = new char[this.zzCurrentPos * 2];
			System.arraycopy(this.zzBuffer, 0, newBuffer, 0,
					this.zzBuffer.length);
			this.zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = this.zzReader.read(this.zzBuffer, this.zzEndRead,
				this.zzBuffer.length - this.zzEndRead);

		if (numRead > 0) {
			this.zzEndRead += numRead;
			return false;
		}
		// unlikely but not impossible: read 0 characters, but not at end of
		// stream
		if (numRead == 0) {
			int c = this.zzReader.read();
			if (c == -1) {
				return true;
			} else {
				this.zzBuffer[this.zzEndRead++] = (char) c;
				return false;
			}
		}

		// numRead < 0
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		this.zzAtEOF = true; /* indicate end of file */
		this.zzEndRead = this.zzStartRead; /* invalidate buffer */

		if (this.zzReader != null) {
			this.zzReader.close();
		}
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the
	 * old reader.
	 * 
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 * 
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		this.zzReader = reader;
		this.zzAtEOF = false;
		this.zzEOFDone = false;
		this.zzEndRead = this.zzStartRead = 0;
		this.zzCurrentPos = this.zzMarkedPos = 0;
		this.zzLexicalState = YYINITIAL;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return this.zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 * 
	 * @param newState
	 *            the new lexical state
	 */
	public final void yybegin(int newState) {
		this.zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(this.zzBuffer, this.zzStartRead, this.zzMarkedPos
				- this.zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 * 
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 * 
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return this.zzBuffer[this.zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return this.zzMarkedPos - this.zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 * 
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and
	 * a match-all fallback rule) this method will only be called with things
	 * that "Can't Possibly Happen". If this method is called, something is
	 * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 * 
	 * Usual syntax/scanner level error handling should be done in error
	 * fallback rules.
	 * 
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * 
	 * They will be read again by then next call of the scanning method
	 * 
	 * @param number
	 *            the number of characters to be read again. This number must
	 *            not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > this.yylength()) {
			this.zzScanError(ZZ_PUSHBACK_2BIG);
		}

		this.zzMarkedPos -= number;
	}

	/**
	 * Contains user EOF-code, which will be executed exactly once, when the end
	 * of file is reached
	 */
	private void zzDoEOF() throws java.io.IOException {
		if (!this.zzEOFDone) {
			this.zzEOFDone = true;
			this.yyclose();
		}
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 * 
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	public int yylex() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = this.zzEndRead;
		char[] zzBufferL = this.zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = this.zzMarkedPos;

			boolean zzR = false;
			for (zzCurrentPosL = this.zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
				switch (zzBufferL[zzCurrentPosL]) {
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					this.yyline++;
					this.yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					this.yyline++;
					this.yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if (zzR) {
						zzR = false;
					} else {
						this.yyline++;
						this.yycolumn = 0;
					}
					break;
				default:
					zzR = false;
					this.yycolumn++;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one
				// line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL) {
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				} else if (this.zzAtEOF) {
					zzPeek = false;
				} else {
					boolean eof = this.zzRefill();
					zzEndReadL = this.zzEndRead;
					zzMarkedPosL = this.zzMarkedPos;
					zzBufferL = this.zzBuffer;
					if (eof) {
						zzPeek = false;
					} else {
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
					}
				}
				if (zzPeek) {
					this.yyline--;
				}
			}
			zzAction = -1;

			zzCurrentPosL = this.zzCurrentPos = this.zzStartRead = zzMarkedPosL;

			this.zzState = ZZ_LEXSTATE[this.zzLexicalState];

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = zzBufferL[zzCurrentPosL++];
					} else if (this.zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						this.zzCurrentPos = zzCurrentPosL;
						this.zzMarkedPos = zzMarkedPosL;
						boolean eof = this.zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = this.zzCurrentPos;
						zzMarkedPosL = this.zzMarkedPos;
						zzBufferL = this.zzBuffer;
						zzEndReadL = this.zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[this.zzState]
							+ zzCMapL[zzInput]];
					if (zzNext == -1) {
						break zzForAction;
					}
					this.zzState = zzNext;

					int zzAttributes = zzAttrL[this.zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = this.zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) {
							break zzForAction;
						}
					}

				}
			}

			// store back cached position
			this.zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
			case 90: {
				return this.KEYWORD(SQLParser.QUERY);
			}
			case 161:
				break;
			case 86: {
				return this.KEYWORD(SQLParser.FLOAT);
			}
			case 162:
				break;
			case 2: {
				throw new SQLTokenUndefinedException(this.yyline,
						this.yycolumn, this.yytext());
			}
			case 163:
				break;
			case 156: {
				return this.KEYWORD(SQLParser.VARBINARY);
			}
			case 164:
				break;
			case 148: {
				return this.STRCOMPARE(SQLParser.CONTAINS,
						NStrCompareExpr.Keywords.CONTAINS);
			}
			case 165:
				break;
			case 20: {
				this.sb.append(this.yytext());
			}
			case 166:
				break;
			case 118: {
				return this.KEYWORD(SQLParser.RETURN);
			}
			case 167:
				break;
			case 64: {
				return this.KEYWORD(SQLParser.DATE);
			}
			case 168:
				break;
			case 71: {
				return this.BOOLEAN(SQLParser.FALSE, true);
			}
			case 169:
				break;
			case 104: {
				return this.SETFUNCTION(SQLParser.COUNT,
						NAggregateExpr.Func.COUNT);
			}
			case 170:
				break;
			case 41: {
				this.sb.append("\"");
			}
			case 171:
				break;
			case 57: {
				return this.KEYWORD(SQLParser.VAR);
			}
			case 172:
				break;
			case 30: {
				return this.KEYWORD(SQLParser.CB);
			}
			case 173:
				break;
			case 6: {
				return this.KEYWORD('-');
			}
			case 174:
				break;
			case 80: {
				return this.KEYWORD(SQLParser.CHAR);
			}
			case 175:
				break;
			case 159: {
				return this.KEYWORD(SQLParser.HIERARCHIES);
			}
			case 176:
				break;
			case 26: {
				this.val = new TString(this.yytext(), this.yyline,
						this.yycolumn, this.yylength());
				return SQLParser.ENV_REF;
			}
			case 177:
				break;
			case 143: {
				return this.KEYWORD(SQLParser.OVERRIDE);
			}
			case 178:
				break;
			case 94: {
				return this.KEYWORD(SQLParser.RANGE);
			}
			case 179:
				break;
			case 19: {
				return this.KEYWORD(';');
			}
			case 180:
				break;
			case 47: {
				return this.KEYWORD(SQLParser.REL);
			}
			case 181:
				break;
			case 38: {
				return this.KEYWORD(SQLParser.TO);
			}
			case 182:
				break;
			case 39: {
				return this.KEYWORD(SQLParser.BY);
			}
			case 183:
				break;
			case 82: {
				return this.KEYWORD(SQLParser.WHEN);
			}
			case 184:
				break;
			case 23: {
				this.yybegin(YYINITIAL);
			}
			case 185:
				break;
			case 81: {
				return this.KEYWORD(SQLParser.WITH);
			}
			case 186:
				break;
			case 155: {
				return this.KEYWORD(SQLParser.PARTITION);
			}
			case 187:
				break;
			case 135: {
				return this.KEYWORD(SQLParser.CURRENT);
			}
			case 188:
				break;
			case 149: {
				return this.KEYWORD(SQLParser.COALESCE);
			}
			case 189:
				break;
			case 136: {
				return this.KEYWORD(SQLParser.COMMENT);
			}
			case 190:
				break;
			case 18: {
				return this.KEYWORD(')');
			}
			case 191:
				break;
			case 117: {
				return this.KEYWORD(SQLParser.UPDATE);
			}
			case 192:
				break;
			case 139: {
				return this.KEYWORD(SQLParser.FUNCTION);
			}
			case 193:
				break;
			case 128: {
				return this.KEYWORD(SQLParser.INDEXES);
			}
			case 194:
				break;
			case 108: {
				return this.KEYWORD(SQLParser.ESCAPE);
			}
			case 195:
				break;
			case 83: {
				return this.KEYWORD(SQLParser.H_LV);
			}
			case 196:
				break;
			case 24: {
				this.yybegin(COMMENT);
			}
			case 197:
				break;
			case 40: {
				this.sb.append("'");
			}
			case 198:
				break;
			case 151: {
				return this.KEYWORD(SQLParser.RETURNING);
			}
			case 199:
				break;
			case 32: {
				return this.KEYWORD(SQLParser.IN);
			}
			case 200:
				break;
			case 29: {
				return this
						.VALUECOMPARE(SQLParser.LE, NCompareExpr.Operator.LE);
			}
			case 201:
				break;
			case 116: {
				return this.KEYWORD(SQLParser.UNIQUE);
			}
			case 202:
				break;
			case 49: {
				return this.KEYWORD(SQLParser.ORM);
			}
			case 203:
				break;
			case 70: {
				return this.KEYWORD(SQLParser.TEXT);
			}
			case 204:
				break;
			case 9: {
				return this.VALUECOMPARE('>', NCompareExpr.Operator.GT);
			}
			case 205:
				break;
			case 4: {
				return this.KEYWORD('.');
			}
			case 206:
				break;
			case 106: {
				return this.KEYWORD(SQLParser.WHILE);
			}
			case 207:
				break;
			case 27: {
				return this
						.VALUECOMPARE(SQLParser.GE, NCompareExpr.Operator.GE);
			}
			case 208:
				break;
			case 95: {
				return this.KEYWORD(SQLParser.ORDER);
			}
			case 209:
				break;
			case 69: {
				return this.KEYWORD(SQLParser.GUID);
			}
			case 210:
				break;
			case 75: {
				return this.KEYWORD(SQLParser.LEFT);
			}
			case 211:
				break;
			case 157: {
				return this.HIERARCHY(SQLParser.ANCESTOROF,
						NHierarchyExpr.Keywords.ANCESTOROF);
			}
			case 212:
				break;
			case 31: {
				return this.KEYWORD(SQLParser.IF);
			}
			case 213:
				break;
			case 109: {
				return this.KEYWORD(SQLParser.EXISTS);
			}
			case 214:
				break;
			case 46: {
				return this.KEYWORD(SQLParser.NOT);
			}
			case 215:
				break;
			case 16: {
				return this.KEYWORD('%');
			}
			case 216:
				break;
			case 112: {
				return this.KEYWORD(SQLParser.DELETE);
			}
			case 217:
				break;
			case 100: {
				return this.KEYWORD(SQLParser.BEGIN);
			}
			case 218:
				break;
			case 102: {
				return this.KEYWORD(SQLParser.BYTES);
			}
			case 219:
				break;
			case 48: {
				return this.KEYWORD(SQLParser.OUT);
			}
			case 220:
				break;
			case 138: {
				return this.KEYWORD(SQLParser.DISTINCT);
			}
			case 221:
				break;
			case 115: {
				return this.KEYWORD(SQLParser.INSERT);
			}
			case 222:
				break;
			case 111: {
				return this.KEYWORD(SQLParser.DEFINE);
			}
			case 223:
				break;
			case 133: {
				return this.KEYWORD(SQLParser.BETWEEN);
			}
			case 224:
				break;
			case 150: {
				return this.STRCOMPARE(SQLParser.ENDS_WITH,
						NStrCompareExpr.Keywords.ENDS_WITH);
			}
			case 225:
				break;
			case 72: {
				return this.KEYWORD(SQLParser.THEN);
			}
			case 226:
				break;
			case 147: {
				return this.HIERARCHY(SQLParser.PARENTOF,
						NHierarchyExpr.Keywords.PARENTOF);
			}
			case 227:
				break;
			case 103: {
				return this.KEYWORD(SQLParser.SHORT);
			}
			case 228:
				break;
			case 85: {
				return this.BOOLEAN(SQLParser.TRUE, false);
			}
			case 229:
				break;
			case 129: {
				return this.KEYWORD(SQLParser.NUMERIC);
			}
			case 230:
				break;
			case 130: {
				return this.KEYWORD(SQLParser.MAPPING);
			}
			case 231:
				break;
			case 11: {
				return this.VALUECOMPARE('=', NCompareExpr.Operator.EQ);
			}
			case 232:
				break;
			case 10: {
				return this.VALUECOMPARE('<', NCompareExpr.Operator.LT);
			}
			case 233:
				break;
			case 14: {
				return this.KEYWORD('*');
			}
			case 234:
				break;
			case 55: {
				return this.KEYWORD(SQLParser.ALL);
			}
			case 235:
				break;
			case 110: {
				return this.KEYWORD(SQLParser.EXTEND);
			}
			case 236:
				break;
			case 60: {
				return this.KEYWORD(SQLParser.KEY);
			}
			case 237:
				break;
			case 78: {
				return this.KEYWORD(SQLParser.LOOP);
			}
			case 238:
				break;
			case 113: {
				return this.KEYWORD(SQLParser.DOUBLE);
			}
			case 239:
				break;
			case 145: {
				return this.KEYWORD(SQLParser.MAXCOUNT);
			}
			case 240:
				break;
			case 8: {
				this.sb.setLength(0);
				this.yybegin(QUOTED_ID);
			}
			case 241:
				break;
			case 114: {
				return this.KEYWORD(SQLParser.FIELDS);
			}
			case 242:
				break;
			case 25: {
				this.val = new TString(this.yytext(), this.yyline,
						this.yycolumn, this.yylength());
				return SQLParser.VAR_REF;
			}
			case 243:
				break;
			case 99: {
				return this.KEYWORD(SQLParser.TABLE);
			}
			case 244:
				break;
			case 89: {
				return this.KEYWORD(SQLParser.NCHAR);
			}
			case 245:
				break;
			case 15: {
				return this.KEYWORD('/');
			}
			case 246:
				break;
			case 144: {
				return this.KEYWORD(SQLParser.MAXLEVEL);
			}
			case 247:
				break;
			case 137: {
				return this.HIERARCHY(SQLParser.CHILDOF,
						NHierarchyExpr.Keywords.CHILDOF);
			}
			case 248:
				break;
			case 152: {
				return this.KEYWORD(SQLParser.RELATIONS);
			}
			case 249:
				break;
			case 36: {
				return this.KEYWORD(SQLParser.OR);
			}
			case 250:
				break;
			case 56: {
				return this.KEYWORD(SQLParser.ASC);
			}
			case 251:
				break;
			case 45: {
				return this.KEYWORD(SQLParser.INT);
			}
			case 252:
				break;
			case 76: {
				return this.STRCOMPARE(SQLParser.LIKE,
						NStrCompareExpr.Keywords.LIKE);
			}
			case 253:
				break;
			case 50: {
				return this.SETFUNCTION(SQLParser.MIN, NAggregateExpr.Func.MIN);
			}
			case 254:
				break;
			case 123: {
				return this.KEYWORD(SQLParser.SELECT);
			}
			case 255:
				break;
			case 35: {
				return this.KEYWORD(SQLParser.ON);
			}
			case 256:
				break;
			case 124: {
				return this.KEYWORD(SQLParser.STRING);
			}
			case 257:
				break;
			case 79: {
				return this.KEYWORD(SQLParser.CASE);
			}
			case 258:
				break;
			case 67: {
				return this.KEYWORD(SQLParser.INTO);
			}
			case 259:
				break;
			case 66: {
				return this.KEYWORD(SQLParser.FROM);
			}
			case 260:
				break;
			case 92: {
				return this.KEYWORD(SQLParser.USING);
			}
			case 261:
				break;
			case 44: {
				return this.KEYWORD(SQLParser.FOR);
			}
			case 262:
				break;
			case 154: {
				return this.KEYWORD(SQLParser.PROCEDURE);
			}
			case 263:
				break;
			case 65: {
				return this.KEYWORD(SQLParser.FULL);
			}
			case 264:
				break;
			case 3: {
				try {
					long l = Long.parseLong(this.yytext());
					int i = (int) l;
					if (l == i) {
						this.val = new TInt(i, this.yyline, this.yycolumn, this
								.yylength());
						return SQLParser.INT_VAL;
					}
					this.val = new TLong(l, this.yyline, this.yycolumn, this
							.yylength());
					return SQLParser.LONG_VAL;
				} catch (NumberFormatException nfe) {
					throw new SQLNumberFormatException(this.yyline,
							this.yycolumn, this.yytext());
				}
			}
			case 265:
				break;
			case 119: {
				return this.KEYWORD(SQLParser.RELATE);
			}
			case 266:
				break;
			case 88: {
				return this.KEYWORD(SQLParser.NTEXT);
			}
			case 267:
				break;
			case 34: {
				return this.KEYWORD(SQLParser.OF);
			}
			case 268:
				break;
			case 141: {
				return this.KEYWORD(SQLParser.RELATION);
			}
			case 269:
				break;
			case 13: {
				return this.KEYWORD('+');
			}
			case 270:
				break;
			case 126: {
				return this.KEYWORD(SQLParser.DEFAULT);
			}
			case 271:
				break;
			case 28: {
				return this
						.VALUECOMPARE(SQLParser.NE, NCompareExpr.Operator.NE);
			}
			case 272:
				break;
			case 5: {
				return this.IDENTIFIER(this.yytext());
			}
			case 273:
				break;
			case 107: {
				return this.KEYWORD(SQLParser.H_AID);
			}
			case 274:
				break;
			case 84: {
				return this.KEYWORD(SQLParser.JOIN);
			}
			case 275:
				break;
			case 122: {
				return this.KEYWORD(SQLParser.BINARY);
			}
			case 276:
				break;
			case 68: {
				return this.KEYWORD(SQLParser.NULL);
			}
			case 277:
				break;
			case 146: {
				return this.KEYWORD(SQLParser.ABSTRACT);
			}
			case 278:
				break;
			case 33: {
				return this.KEYWORD(SQLParser.IS);
			}
			case 279:
				break;
			case 93: {
				return this.KEYWORD(SQLParser.RIGHT);
			}
			case 280:
				break;
			case 63: {
				return this.KEYWORD(SQLParser.DESC);
			}
			case 281:
				break;
			case 105: {
				return this.KEYWORD(SQLParser.WHERE);
			}
			case 282:
				break;
			case 54: {
				return this.KEYWORD(SQLParser.ABO);
			}
			case 283:
				break;
			case 142: {
				return this.KEYWORD(SQLParser.RELATIVE);
			}
			case 284:
				break;
			case 125: {
				return this.KEYWORD(SQLParser.HAVING);
			}
			case 285:
				break;
			case 158: {
				return this.STRCOMPARE(SQLParser.STARTS_WITH,
						NStrCompareExpr.Keywords.STARTS_WITH);
			}
			case 286:
				break;
			case 73: {
				return this.KEYWORD(SQLParser.BYTE);
			}
			case 287:
				break;
			case 58: {
				return this.KEYWORD(SQLParser.SET);
			}
			case 288:
				break;
			case 134: {
				return this.KEYWORD(SQLParser.BOOLEAN);
			}
			case 289:
				break;
			case 61: {
				return this.KEYWORD(SQLParser.ENUM);
			}
			case 290:
				break;
			case 53: {
				return this.SETFUNCTION(SQLParser.AVG, NAggregateExpr.Func.AVG);
			}
			case 291:
				break;
			case 7: {
				this.sb.setLength(0);
				this.yybegin(STR);
			}
			case 292:
				break;
			case 160: {
				return this.HIERARCHY(SQLParser.DESCENDANTOF,
						NHierarchyExpr.Keywords.DESCENDANTOF);
			}
			case 293:
				break;
			case 87: {
				return this.KEYWORD(SQLParser.INOUT);
			}
			case 294:
				break;
			case 98: {
				return this.KEYWORD(SQLParser.VAVLE);
			}
			case 295:
				break;
			case 43: {
				return this.KEYWORD(SQLParser.END);
			}
			case 296:
				break;
			case 127: {
				return this.KEYWORD(SQLParser.FOREACH);
			}
			case 297:
				break;
			case 132: {
				return this.KEYWORD(SQLParser.VARCHAR);
			}
			case 298:
				break;
			case 42: {
				try {
					this.val = new TDouble(Double.parseDouble(this.yytext()),
							this.yyline, this.yycolumn, this.yylength());
					return SQLParser.DOUBLE_VAL;
				} catch (NumberFormatException nfe) {
					throw new SQLNumberFormatException(this.yyline,
							this.yycolumn, this.yytext());
				}
			}
			case 299:
				break;
			case 51: {
				return this.SETFUNCTION(SQLParser.MAX, NAggregateExpr.Func.MAX);
			}
			case 300:
				break;
			case 96: {
				return this.KEYWORD(SQLParser.PRINT);
			}
			case 301:
				break;
			case 97: {
				return this.KEYWORD(SQLParser.GROUP);
			}
			case 302:
				break;
			case 77: {
				return this.KEYWORD(SQLParser.LONG);
			}
			case 303:
				break;
			case 12: {
				return this.KEYWORD(',');
			}
			case 304:
				break;
			case 131: {
				return this.KEYWORD(SQLParser.PRIMARY);
			}
			case 305:
				break;
			case 74: {
				return this.KEYWORD(SQLParser.BLOB);
			}
			case 306:
				break;
			case 22: {
				this.yybegin(YYINITIAL);
				return this.IDENTIFIER(this.sb.toString());
			}
			case 307:
				break;
			case 140: {
				return this.KEYWORD(SQLParser.NVARCHAR);
			}
			case 308:
				break;
			case 120: {
				return this.KEYWORD(SQLParser.ROLLUP);
			}
			case 309:
				break;
			case 52: {
				return this.KEYWORD(SQLParser.AND);
			}
			case 310:
				break;
			case 59: {
				return this.SETFUNCTION(SQLParser.SUM, NAggregateExpr.Func.SUM);
			}
			case 311:
				break;
			case 121: {
				return this.KEYWORD(SQLParser.VALUES);
			}
			case 312:
				break;
			case 21: {
				this.yybegin(YYINITIAL);
				return this.STRING(this.sb.toString());
			}
			case 313:
				break;
			case 91: {
				return this.KEYWORD(SQLParser.UNION);
			}
			case 314:
				break;
			case 153: {
				return this.KEYWORD(SQLParser.RECORDSET);
			}
			case 315:
				break;
			case 37: {
				return this.KEYWORD(SQLParser.AS);
			}
			case 316:
				break;
			case 101: {
				return this.KEYWORD(SQLParser.BREAK);
			}
			case 317:
				break;
			case 62: {
				return this.KEYWORD(SQLParser.ELSE);
			}
			case 318:
				break;
			case 1: {
			}
			case 319:
				break;
			case 17: {
				return this.KEYWORD('(');
			}
			case 320:
				break;
			default:
				if (zzInput == YYEOF && this.zzStartRead == this.zzCurrentPos) {
					this.zzAtEOF = true;
					this.zzDoEOF();
					{
						return 0;
					}
				} else {
					this.zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

}
